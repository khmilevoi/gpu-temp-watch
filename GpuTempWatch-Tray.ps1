#Requires -Version 5.1
# GpuTempWatch-Tray.ps1 ‚Äî –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã GPU

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ STA —Ä–µ–∂–∏–º–∞ –¥–ª—è Windows Forms
[System.Threading.Thread]::CurrentThread.SetApartmentState('STA')

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# –í–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
[System.Windows.Forms.Application]::EnableVisualStyles()
[System.Windows.Forms.Application]::SetCompatibleTextRenderingDefault($false)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$ThresholdC       = 60
$PollSeconds      = 20
$BaseCooldownSec  = 20
$LhmUrl           = "http://127.0.0.1:8085/data.json"
$GpuTempNamePatterns = @("*GPU*Core*", "*GPU*Hot*")

# –ü—É—Ç–∏ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ Scheduled Task)
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
$LogDir  = "$ScriptDir\Logs"
$LogFile = "$LogDir\GpuTempWatch.log"
if (-not (Test-Path $LogDir)) { New-Item -ItemType Directory -Path $LogDir | Out-Null }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
$script:Running = $true
$script:Paused = $false
$script:CurrentTemp = 0
$script:LastStatus = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
$script:StartTime = Get-Date
$script:lastNotified = (Get-Date).AddYears(-1)
$script:currentCooldown = $BaseCooldownSec
$script:wasOverheating = $false

# –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
try { (Get-Process -Id $PID).PriorityClass = 'Idle' } catch {}

function Write-Log([string]$msg) {
    $ts = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
    "$ts $msg" | Out-File -FilePath $LogFile -Append -Encoding utf8
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
Write-Log "INFO: =========================================="
Write-Log "INFO: GpuTempWatch-Tray.ps1 –∑–∞–ø—É—â–µ–Ω"
Write-Log "INFO: PowerShell –≤–µ—Ä—Å–∏—è: $($PSVersionTable.PSVersion)"
Write-Log "INFO: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: $($MyInvocation.Line)"
Write-Log "INFO: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å: $(try { (Get-WmiObject Win32_Process -Filter "ProcessId=$PID").ParentProcessId } catch { 'Unknown' })"
Write-Log "INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $env:USERNAME"
Write-Log "INFO: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(Get-Location)"

# –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
$currentPID = $PID
$scriptName = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.MyCommand.Name)
$oldProcesses = Get-WmiObject Win32_Process | Where-Object {
    $_.CommandLine -like "*$scriptName*" -and $_.ProcessId -ne $currentPID
}
if ($oldProcesses.Count -gt 0) {
    $result = [System.Windows.Forms.MessageBox]::Show(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã GPU Temp Watch ($($oldProcesses.Count) —à—Ç.).`n–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Ö?",
        "–î—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
        [System.Windows.Forms.MessageBoxButtons]::YesNo,
        [System.Windows.Forms.MessageBoxIcon]::Question
    )
    if ($result -eq [System.Windows.Forms.DialogResult]::Yes) {
        foreach ($proc in $oldProcesses) {
            try {
                Write-Log "INFO: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID $($proc.ProcessId)"
                Stop-Process -Id $proc.ProcessId -Force
            } catch {
                Write-Log "WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID $($proc.ProcessId)"
            }
        }
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ BurntToast - —É–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
$BurntToastAvailable = $false
try {
    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å —Å —Ä–∞–∑–Ω—ã—Ö –ø—É—Ç–µ–π
    $burntToastModule = Get-Module -ListAvailable -Name BurntToast | Select-Object -First 1
    if ($burntToastModule) {
        Import-Module BurntToast -ErrorAction Stop -Force -Global
        $BurntToastAvailable = $true
        Write-Log "INFO: BurntToast –º–æ–¥—É–ª—å v$($burntToastModule.Version) –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ $($burntToastModule.ModuleBase)"
    } else {
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        Write-Log "WARN: BurntToast –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        try {
            Install-Module BurntToast -Force -Scope CurrentUser -Repository PSGallery -ErrorAction Stop
            Import-Module BurntToast -ErrorAction Stop -Force -Global
            $BurntToastAvailable = $true
            Write-Log "INFO: BurntToast –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω"
        } catch {
            Write-Log "ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BurntToast ‚Äî $($_.Exception.Message)"
        }
    }
} catch {
    Write-Log "ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BurntToast ‚Äî $($_.Exception.Message)"
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –ø—Ä—è–º—ã–º –ø—É—Ç–µ–º –∫ –º–æ–¥—É–ª—é
    try {
        $userModulesPath = "$env:USERPROFILE\Documents\WindowsPowerShell\Modules\BurntToast"
        if (Test-Path $userModulesPath) {
            Import-Module $userModulesPath -Force -Global
            $BurntToastAvailable = $true
            Write-Log "INFO: BurntToast –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –ø—Ä—è–º–æ–º—É –ø—É—Ç–∏"
        }
    } catch {
        Write-Log "ERROR: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BurntToast –Ω–µ—É–¥–∞—á–Ω–∞ ‚Äî $($_.Exception.Message)"
    }
}

function Parse-Temp([object]$valueStr) {
    if ($null -eq $valueStr) { return $null }
    $m = [regex]::Match([string]$valueStr, '[-+]?\d+(?:[.,]\d+)?')
    if (-not $m.Success) { return $null }
    $s = $m.Value.Replace(',', '.')
    try { return [double]$s } catch { return $null }
}

function Collect-GpuTemps([object]$node) {
    $temps = @()
    if ($null -eq $node) { return $temps }

    if ($node.PSObject.Properties.Name -contains 'Type' -and
        $node.Type -eq 'Temperature' -and
        $node.PSObject.Properties.Name -contains 'Text') {

        foreach ($pat in $GpuTempNamePatterns) {
            if ($node.Text -like $pat) {
                $val = Parse-Temp $node.Value
                if ($null -ne $val) { $temps += $val }
                break
            }
        }
    }

    if ($node.PSObject.Properties.Name -contains 'Children' -and $node.Children) {
        foreach ($ch in $node.Children) {
            $childTemps = Collect-GpuTemps $ch
            if ($null -ne $childTemps -and $childTemps.Length -gt 0) {
                $temps += $childTemps
            }
        }
    }
    return $temps
}

function Notify([double]$tc, [int]$threshold) {
    $message = "‚ö† –ü–ï–†–ï–ì–†–ï–í –í–ò–î–ï–û–ö–ê–†–¢–´! GPU: $tc ¬∞C (–ø–æ—Ä–æ–≥: $threshold ¬∞C)"
    Write-Log "ALERT: GPU $tc ¬∞C >= $threshold ¬∞C"

    # BurntToast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ($BurntToastAvailable) {
        try {
            New-BurntToastNotification -Text "‚ö† –ü–µ—Ä–µ–≥—Ä–µ–≤ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", "GPU: $tc ¬∞C (–ø–æ—Ä–æ–≥: $threshold ¬∞C)" -Sound 'Alarm2'
            Write-Log "INFO: BurntToast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            return
        } catch {
            Write-Log "ERROR: BurntToast –æ—à–∏–±–∫–∞ ‚Äî $($_.Exception.Message), –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback"
        }
    }

    # MessageBox fallback
    try {
        [System.Windows.Forms.MessageBox]::Show(
            $message,
            "üî• GPU Temperature Alert",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Warning,
            [System.Windows.Forms.MessageBoxDefaultButton]::Button1,
            [System.Windows.Forms.MessageBoxOptions]::DefaultDesktopOnly
        ) | Out-Null
        Write-Log "INFO: MessageBox —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    } catch {
        Write-Log "ERROR: MessageBox –æ—à–∏–±–∫–∞ ‚Äî $($_.Exception.Message)"
    }
}

function Get-TempIcon([double]$temp) {
    if ($temp -eq 0) { return "‚ùì" }  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if ($temp -ge $ThresholdC) { return "üî¥" }  # –ü–µ—Ä–µ–≥—Ä–µ–≤
    if ($temp -ge ($ThresholdC * 0.8)) { return "üü°" }  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    return "üü¢"  # –ù–æ—Ä–º–∞
}

function Update-TrayIcon($notifyIcon, [double]$temp) {
    $icon = Get-TempIcon $temp
    $tempText = if ($temp -gt 0) { "$temp¬∞C" } else { "N/A" }

    $notifyIcon.Text = "GPU Temp: $tempText"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—ç–º—É–ª—è—Ü–∏—è)
    $bitmap = New-Object System.Drawing.Bitmap(16, 16)
    $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
    $graphics.Clear([System.Drawing.Color]::Transparent)

    $color = switch ($icon) {
        "üî¥" { [System.Drawing.Color]::Red }
        "üü°" { [System.Drawing.Color]::Orange }
        "üü¢" { [System.Drawing.Color]::LimeGreen }
        default { [System.Drawing.Color]::Gray }
    }

    $graphics.FillEllipse([System.Drawing.SolidBrush]::new($color), 2, 2, 12, 12)
    $graphics.Dispose()

    $notifyIcon.Icon = [System.Drawing.Icon]::FromHandle($bitmap.GetHicon())
}

function Show-SettingsDialog {
    $form = New-Object System.Windows.Forms.Form
    $form.Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPU Temp Watch"
    $form.Size = New-Object System.Drawing.Size(300, 200)
    $form.StartPosition = "CenterScreen"
    $form.FormBorderStyle = "FixedDialog"
    $form.MaximizeBox = $false

    $label1 = New-Object System.Windows.Forms.Label
    $label1.Text = "–ü–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (¬∞C):"
    $label1.Location = New-Object System.Drawing.Point(10, 20)
    $label1.Size = New-Object System.Drawing.Size(150, 20)
    $form.Controls.Add($label1)

    $textBox1 = New-Object System.Windows.Forms.TextBox
    $textBox1.Text = $ThresholdC
    $textBox1.Location = New-Object System.Drawing.Point(170, 18)
    $textBox1.Size = New-Object System.Drawing.Size(60, 20)
    $form.Controls.Add($textBox1)

    $label2 = New-Object System.Windows.Forms.Label
    $label2.Text = "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ (—Å–µ–∫):"
    $label2.Location = New-Object System.Drawing.Point(10, 50)
    $label2.Size = New-Object System.Drawing.Size(150, 20)
    $form.Controls.Add($label2)

    $textBox2 = New-Object System.Windows.Forms.TextBox
    $textBox2.Text = $PollSeconds
    $textBox2.Location = New-Object System.Drawing.Point(170, 48)
    $textBox2.Size = New-Object System.Drawing.Size(60, 20)
    $form.Controls.Add($textBox2)

    $okButton = New-Object System.Windows.Forms.Button
    $okButton.Text = "OK"
    $okButton.Location = New-Object System.Drawing.Point(120, 120)
    $okButton.Size = New-Object System.Drawing.Size(75, 23)
    $okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
    $form.Controls.Add($okButton)

    $cancelButton = New-Object System.Windows.Forms.Button
    $cancelButton.Text = "–û—Ç–º–µ–Ω–∞"
    $cancelButton.Location = New-Object System.Drawing.Point(200, 120)
    $cancelButton.Size = New-Object System.Drawing.Size(75, 23)
    $cancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    $form.Controls.Add($cancelButton)

    if ($form.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        try {
            $script:ThresholdC = [int]$textBox1.Text
            $script:PollSeconds = [int]$textBox2.Text
            Write-Log "INFO: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã - –ø–æ—Ä–æ–≥: $ThresholdC¬∞C, –∏–Ω—Ç–µ—Ä–≤–∞–ª: $PollSeconds —Å–µ–∫"
        } catch {
            [System.Windows.Forms.MessageBox]::Show("–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.", "–û—à–∏–±–∫–∞")
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Write-Log "INFO: –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è..."

try {
    $applicationContext = New-Object System.Windows.Forms.ApplicationContext
    Write-Log "INFO: ‚úì ApplicationContext —Å–æ–∑–¥–∞–Ω"

    $notifyIcon = New-Object System.Windows.Forms.NotifyIcon
    Write-Log "INFO: ‚úì NotifyIcon —Å–æ–∑–¥–∞–Ω"

    $notifyIcon.Visible = $true
    Write-Log "INFO: ‚úì NotifyIcon —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –≤–∏–¥–∏–º—ã–π"
} catch {
    Write-Log "ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ—è: $($_.Exception.Message)"
    Write-Log "ERROR: StackTrace: $($_.Exception.StackTrace)"
    throw
}

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
$contextMenu = New-Object System.Windows.Forms.ContextMenuStrip
$notifyIcon.ContextMenuStrip = $contextMenu

# –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
$statusItem = New-Object System.Windows.Forms.ToolStripMenuItem
$statusItem.Text = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –ó–∞–≥—Ä—É–∑–∫–∞..."
$statusItem.Enabled = $false
$contextMenu.Items.Add($statusItem)

$contextMenu.Items.Add("-")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

$pauseItem = New-Object System.Windows.Forms.ToolStripMenuItem
$pauseItem.Text = "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
$pauseItem.Add_Click({
    $script:Paused = -not $script:Paused
    $pauseItem.Text = if ($script:Paused) { "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å" } else { "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" }
    $status = if ($script:Paused) { "–ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù" } else { "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω" }
    $script:LastStatus = $status
    Write-Log "INFO: $status"
})
$contextMenu.Items.Add($pauseItem)

$settingsItem = New-Object System.Windows.Forms.ToolStripMenuItem
$settingsItem.Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏..."
$settingsItem.Add_Click({ Show-SettingsDialog })
$contextMenu.Items.Add($settingsItem)

$logsItem = New-Object System.Windows.Forms.ToolStripMenuItem
$logsItem.Text = "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
$logsItem.Add_Click({
    if (Test-Path $LogFile) {
        Start-Process notepad.exe -ArgumentList $LogFile
    } else {
        [System.Windows.Forms.MessageBox]::Show("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω:`n$LogFile", "–û—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
    }
})
$contextMenu.Items.Add($logsItem)

$contextMenu.Items.Add("-")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

$exitItem = New-Object System.Windows.Forms.ToolStripMenuItem
$exitItem.Text = "–í—ã—Ö–æ–¥"
$exitItem.Add_Click({
    $script:Running = $false
    $timer.Stop()
    $notifyIcon.Visible = $false
    Write-Log "INFO: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    $applicationContext.ExitThread()
})
$contextMenu.Items.Add($exitItem)

# –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
$notifyIcon.Add_DoubleClick({
    $uptime = (New-TimeSpan $script:StartTime (Get-Date)).ToString("hh\:mm\:ss")
    $status = "GPU Temp Watch`n`n–°–æ—Å—Ç–æ—è–Ω–∏–µ: $script:LastStatus`n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $uptime`n–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: $script:CurrentTemp¬∞C"
    [System.Windows.Forms.MessageBox]::Show($status, "–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏
Update-TrayIcon $notifyIcon 0

Write-Log "=== –ó–∞–ø—É—Å–∫ GPU Temp Watch Tray (–ø–æ—Ä–æ–≥ $ThresholdC ¬∞C, –∏–Ω—Ç–µ—Ä–≤–∞–ª $PollSeconds c) ==="

# –¢–∞–π–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
$timer = New-Object System.Windows.Forms.Timer
$timer.Interval = $PollSeconds * 1000
$timer.Add_Tick({
    if ($script:Paused) { return }

    try {
        $json = Invoke-RestMethod -Uri $LhmUrl -TimeoutSec 2
        $temps = Collect-GpuTemps $json

        if ($temps.Count -gt 0) {
            $maxTemp = [math]::Round( ($temps | Measure-Object -Maximum).Maximum, 1)
            $script:CurrentTemp = $maxTemp

            Write-Log "INFO: GPU —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞(—ã) = $($temps -join ', ') ¬∞C; max=$maxTemp ¬∞C"

            $script:LastStatus = "GPU: $maxTemp¬∞C"
            $statusItem.Text = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: $maxTemp¬∞C $(Get-TempIcon $maxTemp)"
            Update-TrayIcon $notifyIcon $maxTemp

            if ($maxTemp -ge $ThresholdC) {
                $elapsed = (New-TimeSpan $script:lastNotified (Get-Date)).TotalSeconds
                if ($elapsed -ge $script:currentCooldown) {
                    Notify $maxTemp $ThresholdC
                    $script:lastNotified = Get-Date
                    $script:currentCooldown = [math]::Min($script:currentCooldown * 2, 320)
                    Write-Log "INFO: –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $script:currentCooldown —Å–µ–∫"
                }
                $script:wasOverheating = $true
            } else {
                if ($script:wasOverheating) {
                    $script:currentCooldown = $BaseCooldownSec
                    $script:wasOverheating = $false
                    Write-Log "INFO: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å, cooldown —Å–±—Ä–æ—à–µ–Ω –¥–æ $BaseCooldownSec —Å–µ–∫"
                }
            }
        } else {
            $script:LastStatus = "–°–µ–Ω—Å–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            $statusItem.Text = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: N/A ‚ùì"
            Update-TrayIcon $notifyIcon 0
            Write-Log "WARN: –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–Ω—Å–æ—Ä—ã GPU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (patterns: $($GpuTempNamePatterns -join '; '))"
        }
    } catch {
        $script:LastStatus = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        $statusItem.Text = "–û—à–∏–±–∫–∞: LHM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚ùì"
        Update-TrayIcon $notifyIcon 0
        Write-Log "ERROR: –∑–∞–ø—Ä–æ—Å/–ø–∞—Ä—Å–∏–Ω–≥ JSON ‚Äî $($_.Exception.Message)"
    }
})

$timer.Start()

# –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
Add-Type -Name Window -Namespace Console -MemberDefinition '
[DllImport("Kernel32.dll")]
public static extern IntPtr GetConsoleWindow();

[DllImport("user32.dll")]
public static extern bool ShowWindow(IntPtr hWnd, Int32 nCmdShow);

[DllImport("user32.dll")]
public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, uint uFlags);

[DllImport("user32.dll")]
public static extern bool IsWindowVisible(IntPtr hWnd);
'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª–∏
function Hide-ConsoleWindow {
    try {
        $consolePtr = [Console.Window]::GetConsoleWindow()
        if ($consolePtr -ne [System.IntPtr]::Zero) {
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏–º–æ –ª–∏ –æ–∫–Ω–æ
            $wasVisible = [Console.Window]::IsWindowVisible($consolePtr)
            Write-Log "INFO: –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ (–≤–∏–¥–∏–º–æ: $wasVisible)"

            # –ü—Ä–æ–±—É–µ–º —Å–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            $result1 = [Console.Window]::ShowWindow($consolePtr, 0) # SW_HIDE
            Start-Sleep -Milliseconds 100
            $result2 = [Console.Window]::ShowWindow($consolePtr, 6) # SW_MINIMIZE
            Start-Sleep -Milliseconds 100
            $result3 = [Console.Window]::ShowWindow($consolePtr, 0) # SW_HIDE —Å–Ω–æ–≤–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            $isStillVisible = [Console.Window]::IsWindowVisible($consolePtr)
            Write-Log "INFO: –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª–∏: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ($result1, $result2, $result3), –≤–∏–¥–∏–º–æ: $isStillVisible"

            if (-not $isStillVisible) {
                Write-Log "INFO: ‚úì –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–æ"
            } else {
                Write-Log "WARN: ‚ö† –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫ —Å–∫—Ä—ã—Ç–∏—è"
            }
        } else {
            Write-Log "INFO: –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—É–∂–µ —Å–∫—Ä—ã—Ç–æ –∏–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏)"
        }
    } catch {
        Write-Log "ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Å–æ–ª–∏: $($_.Exception.Message)"
    }
}

# –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
Hide-ConsoleWindow

Write-Log "INFO: –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –∑–∞–ø—É—â–µ–Ω"

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
try {
    [System.Windows.Forms.Application]::Run($applicationContext)
} catch {
    Write-Log "ERROR: –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $($_.Exception.Message)"
} finally {
    Write-Log "INFO: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
$timer.Stop()
$notifyIcon.Dispose()
Write-Log "INFO: GPU Temp Watch Tray –∑–∞–≤–µ—Ä—à–µ–Ω"