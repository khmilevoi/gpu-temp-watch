#Requires -Version 5.1
# GpuTempWatch.ps1 ‚Äî LHM JSON (Type/Text), —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥, –ª—ë–≥–∫–∏–µ –ª–æ–≥–∏

$ThresholdC       = 60
$PollSeconds      = 20
$BaseCooldownSec  = 20
$LhmUrl           = "http://127.0.0.1:8085/data.json"

# –ö–∞–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å—á–∏—Ç–∞–µ–º ¬´—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π GPU¬ª
$GpuTempNamePatterns = @("*GPU*Core*", "*GPU*Hot*")   # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "*GPU*Temperature*"

# –õ–æ–≥–∏ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ Scheduled Task)
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
$LogDir  = "$ScriptDir\Logs"
$LogFile = "$LogDir\GpuTempWatch.log"
if (-not (Test-Path $LogDir)) { New-Item -ItemType Directory -Path $LogDir | Out-Null }

# –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
$currentPID = $PID
$scriptName = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.MyCommand.Name)
$oldProcesses = Get-WmiObject Win32_Process | Where-Object {
    $_.CommandLine -like "*$scriptName*" -and $_.ProcessId -ne $currentPID
}
foreach ($proc in $oldProcesses) {
    try {
        Write-Log "INFO: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID $($proc.ProcessId)"
        Stop-Process -Id $proc.ProcessId -Force
    } catch {
        Write-Log "WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID $($proc.ProcessId)"
    }
}

# –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
try { (Get-Process -Id $PID).PriorityClass = 'Idle' } catch {}

function Write-Log([string]$msg) {
    $ts = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
    "$ts $msg" | Out-File -FilePath $LogFile -Append -Encoding utf8
}

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —É–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BurntToast
$BurntToastAvailable = $false
try {
    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å —Å —Ä–∞–∑–Ω—ã—Ö –ø—É—Ç–µ–π
    $burntToastModule = Get-Module -ListAvailable -Name BurntToast | Select-Object -First 1
    if ($burntToastModule) {
        Import-Module BurntToast -ErrorAction Stop -Force -Global
        $BurntToastAvailable = $true
        Write-Log "INFO: BurntToast –º–æ–¥—É–ª—å v$($burntToastModule.Version) –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ $($burntToastModule.ModuleBase)"
    } else {
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        Write-Log "WARN: BurntToast –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        try {
            Install-Module BurntToast -Force -Scope CurrentUser -Repository PSGallery -ErrorAction Stop
            Import-Module BurntToast -ErrorAction Stop -Force -Global
            $BurntToastAvailable = $true
            Write-Log "INFO: BurntToast –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω"
        } catch {
            Write-Log "ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BurntToast ‚Äî $($_.Exception.Message)"
        }
    }
} catch {
    Write-Log "ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BurntToast ‚Äî $($_.Exception.Message)"
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –ø—Ä—è–º—ã–º –ø—É—Ç–µ–º –∫ –º–æ–¥—É–ª—é
    try {
        $userModulesPath = "$env:USERPROFILE\Documents\WindowsPowerShell\Modules\BurntToast"
        if (Test-Path $userModulesPath) {
            Import-Module $userModulesPath -Force -Global
            $BurntToastAvailable = $true
            Write-Log "INFO: BurntToast –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –ø—Ä—è–º–æ–º—É –ø—É—Ç–∏"
        }
    } catch {
        Write-Log "ERROR: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BurntToast –Ω–µ—É–¥–∞—á–Ω–∞ ‚Äî $($_.Exception.Message)"
    }
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–º–Ω–æ–≥–æ cooldown
$lastNotified = (Get-Date).AddYears(-1)
$currentCooldown = $BaseCooldownSec
$wasOverheating = $false

function Parse-Temp([object]$valueStr) {
    if ($null -eq $valueStr) { return $null }
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —á–∏—Å–ª–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–ø—è—Ç–æ–π (61,0 ¬∞C -> 61.0)
    $m = [regex]::Match([string]$valueStr, '[-+]?\d+(?:[.,]\d+)?')
    if (-not $m.Success) { return $null }
    $s = $m.Value.Replace(',', '.')
    try { return [double]$s } catch { return $null }
}

function Collect-GpuTemps([object]$node) {
    $temps = @()
    if ($null -eq $node) { return $temps }

    # –ï—Å–ª–∏ —ç—Ç–æ ¬´–ª–∏—Å—Ç¬ª —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
    if ($node.PSObject.Properties.Name -contains 'Type' -and
        $node.Type -eq 'Temperature' -and
        $node.PSObject.Properties.Name -contains 'Text') {

        foreach ($pat in $GpuTempNamePatterns) {
            if ($node.Text -like $pat) {
                $val = Parse-Temp $node.Value
                if ($null -ne $val) { $temps += $val }
                break
            }
        }
    }

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º Children
    if ($node.PSObject.Properties.Name -contains 'Children' -and $node.Children) {
        foreach ($ch in $node.Children) {
            $childTemps = Collect-GpuTemps $ch
            if ($null -ne $childTemps -and $childTemps.Length -gt 0) {
                $temps += $childTemps
            }
        }
    }
    return $temps
}

function Notify([double]$tc, [int]$threshold) {
    $message = "‚ö† –ü–ï–†–ï–ì–†–ï–í –í–ò–î–ï–û–ö–ê–†–¢–´! GPU: $tc ¬∞C (–ø–æ—Ä–æ–≥: $threshold ¬∞C)"

    # –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    Write-Log "ALERT: GPU $tc ¬∞C >= $threshold ¬∞C"

    # 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: BurntToast (–∫—Ä–∞—Å–∏–≤—ã–µ Windows 11 toast)
    if ($BurntToastAvailable) {
        try {
            New-BurntToastNotification -Text "‚ö† –ü–µ—Ä–µ–≥—Ä–µ–≤ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", "GPU: $tc ¬∞C (–ø–æ—Ä–æ–≥: $threshold ¬∞C)" -Sound 'Alarm2'
            Write-Log "INFO: BurntToast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            return
        } catch {
            Write-Log "ERROR: BurntToast –æ—à–∏–±–∫–∞ ‚Äî $($_.Exception.Message), –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback"
        }
    }

    # 2. Fallback: MessageBox (–Ω–∞–≤—è–∑—á–∏–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏)
    try {
        Add-Type -AssemblyName System.Windows.Forms
        [System.Windows.Forms.MessageBox]::Show(
            $message,
            "üî• GPU Temperature Alert",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Warning,
            [System.Windows.Forms.MessageBoxDefaultButton]::Button1,
            [System.Windows.Forms.MessageBoxOptions]::DefaultDesktopOnly
        ) | Out-Null
        Write-Log "INFO: MessageBox —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        return
    } catch {
        Write-Log "ERROR: MessageBox –æ—à–∏–±–∫–∞ ‚Äî $($_.Exception.Message)"
    }

    # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    Write-Host $message -ForegroundColor Red -BackgroundColor Yellow
    Write-Log "INFO: –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
}

Write-Log "=== –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ—Ä–æ–≥ $ThresholdC ¬∞C, –∏–Ω—Ç–µ—Ä–≤–∞–ª $PollSeconds c) ==="

while ($true) {
    try {
        $json = Invoke-RestMethod -Uri $LhmUrl -TimeoutSec 2

        # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        $temps = Collect-GpuTemps $json

        if ($temps.Count -gt 0) {
            $maxTemp = [math]::Round( ($temps | Measure-Object -Maximum).Maximum, 1)
            Write-Log "INFO: GPU —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞(—ã) = $($temps -join ', ') ¬∞C; max=$maxTemp ¬∞C"

            if ($maxTemp -ge $ThresholdC) {
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥
                $elapsed = (New-TimeSpan $lastNotified (Get-Date)).TotalSeconds

                if ($elapsed -ge $currentCooldown) {
                    Notify $maxTemp $ThresholdC
                    $lastNotified = Get-Date

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º cooldown —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ (20, 40, 80, 160, 320 —Å–µ–∫)
                    $currentCooldown = [math]::Min($currentCooldown * 2, 320)
                    Write-Log "INFO: –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $currentCooldown —Å–µ–∫"
                }
                $wasOverheating = $true
            } else {
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
                if ($wasOverheating) {
                    $currentCooldown = $BaseCooldownSec
                    $wasOverheating = $false
                    Write-Log "INFO: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å, cooldown —Å–±—Ä–æ—à–µ–Ω –¥–æ $BaseCooldownSec —Å–µ–∫"
                }
            }
        } else {
            Write-Log "WARN: –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–Ω—Å–æ—Ä—ã GPU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (patterns: $($GpuTempNamePatterns -join '; '))"
        }
    } catch {
        Write-Log "ERROR: –∑–∞–ø—Ä–æ—Å/–ø–∞—Ä—Å–∏–Ω–≥ JSON ‚Äî $($_.Exception.Message)"
    }

    Start-Sleep -Seconds $PollSeconds
}
